import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import fs from 'fs';
import path from 'path';
import Store from 'electron-store';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SELECTED_FOLDER_STORE_NAME = 'selected-folder';
const store = new Store();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const get_files = (path: string) => {
  const files = fs.readdirSync(path, {
    recursive: true,
    withFileTypes: true,
  });

  return files
    .map(file => ({ ...file, is_dir: file.isDirectory() }))
    .filter(file => file.name !== '.git');
};

const createWindow = () => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    frame: false, // Frameless window
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.handle('get-folder', async () => {
    // @ts-ignore
    return store.get(SELECTED_FOLDER_STORE_NAME);
  });

  ipcMain.handle('open-folder', async () => {
    const folder = await dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory'],
    });

    if (folder.canceled) return; // If the user canceled the folder select, we just return void

    const tree = get_files(folder.filePaths[0]);
    const structure = {
      name: path.dirname(folder.filePaths[0]),
      root: folder.filePaths[0],
      tree: tree,
    };

    console.log('structure', structure);

    // @ts-ignore
    store.set(SELECTED_FOLDER_STORE_NAME, structure);

    return structure;
  });

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
