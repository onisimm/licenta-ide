import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import fs from 'fs';
import path from 'path';
import Store from 'electron-store';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SELECTED_FOLDER_STORE_NAME = 'selected-folder';
const store = new Store();

// Global reference to main window
let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const buildFileTree = (
  dirPath: string,
  maxDepth: number = 0,
  currentDepth: number = 0,
): any[] => {
  try {
    // Read only the direct children of this directory (not recursive)
    const items = fs.readdirSync(dirPath, { withFileTypes: true });

    return items
      .sort((a, b) => {
        // Directories first, then files, alphabetically
        if (a.isDirectory() && !b.isDirectory()) return -1;
        if (!a.isDirectory() && b.isDirectory()) return 1;
        return a.name.localeCompare(b.name);
      })
      .map(item => {
        const itemPath = path.join(dirPath, item.name);
        const node = {
          name: item.name,
          parentPath: dirPath,
          path: itemPath,
          isDirectory: item.isDirectory(),
          children: [] as any[],
          childrenLoaded: false,
          isLoading: false,
        };

        // For directories: load children if we haven't reached max depth
        if (item.isDirectory() && currentDepth < maxDepth) {
          try {
            // Recursively load with incremented depth
            node.children = buildFileTree(itemPath, maxDepth, currentDepth + 1);
            node.childrenLoaded = true;
          } catch (error) {
            // Handle permission errors or other issues
            console.warn(`Cannot read directory: ${itemPath}`, error);
            node.children = [];
            node.childrenLoaded = true; // Mark as loaded even if empty due to error
          }
        }

        return node;
      });
  } catch (error) {
    console.error(`Error reading directory: ${dirPath}`, error);
    return [];
  }
};

// Enhanced IPC handler for loading children with 2-level deep loading
ipcMain.handle('load-directory-children', async (event, dirPath: string) => {
  try {
    console.log('Loading children for:', dirPath, '(2 levels deep)');
    // Load 2 levels deep: immediate children + their children
    const children = buildFileTree(dirPath, 2, 0);
    return children;
  } catch (error) {
    console.error('Error loading directory children:', error);

    // Ensure we return a proper error message, not an Event object
    const errorMessage =
      error instanceof Error
        ? error.message
        : typeof error === 'string'
        ? error
        : 'Unknown error loading directory children';

    throw new Error(errorMessage);
  }
});

// Set up IPC handlers
ipcMain.handle('get-folder', async () => {
  // @ts-ignore
  return store.get(SELECTED_FOLDER_STORE_NAME);
});

ipcMain.handle('open-folder', async () => {
  try {
    if (!mainWindow) {
      console.error('No main window available');
      return null;
    }

    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory'],
      title: 'Select Directory',
    });

    console.log('Dialog result:', result);

    if (result.canceled || !result.filePaths || result.filePaths.length === 0) {
      console.log('Dialog was cancelled or no paths selected');
      return null;
    }

    const selectedPath = result.filePaths[0];
    console.log('Selected path:', selectedPath);

    // Load 2 levels deep for initial folder opening for better UX
    const tree = buildFileTree(selectedPath, 2, 0);

    const structure = {
      name: path.basename(selectedPath),
      root: selectedPath,
      tree: tree,
    };

    console.log('Folder structure created successfully (2 levels deep)');

    // @ts-ignore
    store.set(SELECTED_FOLDER_STORE_NAME, structure);

    return structure;
  } catch (error) {
    console.error('Error in open-folder handler:', error);
    return null;
  }
});

ipcMain.handle('open-file-or-folder', async () => {
  try {
    if (!mainWindow) {
      console.error('No main window available');
      return null;
    }

    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ['openFile', 'openDirectory'],
      title: 'Select File or Directory',
    });

    console.log('File/Folder dialog result:', result);

    if (result.canceled || !result.filePaths || result.filePaths.length === 0) {
      console.log('Dialog was cancelled or no paths selected');
      return null;
    }

    const selectedPath = result.filePaths[0];
    console.log('Selected path:', selectedPath);

    // Check if the selected path is a file or directory
    const stats = fs.statSync(selectedPath);

    if (stats.isFile()) {
      // Handle file opening
      const content = fs.readFileSync(selectedPath, 'utf8');
      const fileName = path.basename(selectedPath);
      const fileExtension = path.extname(selectedPath).toLowerCase();

      // Map file extensions to languages
      const languageMap: { [key: string]: string } = {
        '.js': 'javascript',
        '.jsx': 'jsx',
        '.ts': 'typescript',
        '.tsx': 'tsx',
        '.json': 'json',
        '.html': 'html',
        '.css': 'css',
        '.scss': 'scss',
        '.less': 'less',
        '.xml': 'xml',
        '.yaml': 'yaml',
        '.yml': 'yaml',
        '.md': 'markdown',
        '.py': 'python',
        '.java': 'java',
        '.cs': 'csharp',
        '.cpp': 'cpp',
        '.c': 'c',
        '.php': 'php',
        '.rb': 'ruby',
        '.go': 'go',
        '.rs': 'rust',
        '.swift': 'swift',
        '.kt': 'kotlin',
        '.scala': 'scala',
        '.sh': 'shell',
        '.ps1': 'powershell',
        '.sql': 'sql',
        '.dockerfile': 'dockerfile',
        '.txt': 'plaintext',
      };

      const language = languageMap[fileExtension] || 'plaintext';

      return {
        type: 'file',
        file: {
          path: selectedPath,
          name: fileName,
          content: content,
          language: language,
        },
      };
    } else if (stats.isDirectory()) {
      // Handle directory opening (same as existing logic)
      const tree = buildFileTree(selectedPath, 2, 0);

      const structure = {
        name: path.basename(selectedPath),
        root: selectedPath,
        tree: tree,
      };

      console.log('Folder structure created successfully (2 levels deep)');

      // @ts-ignore
      store.set(SELECTED_FOLDER_STORE_NAME, structure);

      return {
        type: 'folder',
        folder: structure,
      };
    }

    return null;
  } catch (error) {
    console.error('Error in open-file-or-folder handler:', error);
    return null;
  }
});

// Helper function to detect file language based on extension
const getLanguageFromFileName = (fileName: string): string => {
  const extension = path.extname(fileName).toLowerCase();

  const languageMap: Record<string, string> = {
    '.js': 'javascript',
    '.jsx': 'jsx', // Specifically map JSX
    '.ts': 'typescript',
    '.tsx': 'tsx', // Specifically map TSX
    '.py': 'python',
    '.java': 'java',
    '.c': 'c',
    '.cpp': 'cpp',
    '.cxx': 'cpp',
    '.cc': 'cpp',
    '.h': 'c',
    '.hpp': 'cpp',
    '.cs': 'csharp',
    '.php': 'php',
    '.rb': 'ruby',
    '.go': 'go',
    '.rs': 'rust',
    '.swift': 'swift',
    '.kt': 'kotlin',
    '.scala': 'scala',
    '.sh': 'shell',
    '.bash': 'shell',
    '.zsh': 'shell',
    '.fish': 'shell',
    '.ps1': 'powershell',
    '.html': 'html',
    '.htm': 'html',
    '.css': 'css',
    '.scss': 'scss',
    '.sass': 'sass',
    '.less': 'less',
    '.json': 'json',
    '.xml': 'xml',
    '.yaml': 'yaml',
    '.yml': 'yaml',
    '.toml': 'toml',
    '.ini': 'ini',
    '.cfg': 'ini',
    '.conf': 'ini',
    '.md': 'markdown',
    '.markdown': 'markdown',
    '.txt': 'plaintext',
    '.log': 'plaintext',
    '.sql': 'sql',
    '.dockerfile': 'dockerfile',
    '.dockerignore': 'dockerfile',
    '.gitignore': 'plaintext',
    '.env': 'plaintext',
  };

  return languageMap[extension] || 'plaintext';
};

// New IPC handler for reading file contents
ipcMain.handle('read-file', async (event, filePath: string) => {
  let result = null;

  try {
    console.log('Reading file:', filePath);

    // Validate input
    if (!filePath || typeof filePath !== 'string') {
      throw new Error('Invalid file path provided');
    }

    // Check if file exists and is readable
    const stats = await fs.promises.stat(filePath).catch(statError => {
      throw new Error(`Cannot access file: ${statError.message}`);
    });

    if (!stats.isFile()) {
      throw new Error('Path is not a file');
    }

    const maxFileSize = 10 * 1024 * 1024; // 10MB

    // Read file content with explicit error handling
    const content = await fs.promises
      .readFile(filePath, 'utf8')
      .catch(readError => {
        throw new Error(`Cannot read file content: ${readError.message}`);
      });

    const fileName = path.basename(filePath);
    const language = getLanguageFromFileName(fileName);

    result = {
      path: filePath,
      name: fileName,
      content,
      language,
    };

    // Validate result object before returning
    if (
      !result.path ||
      !result.name ||
      typeof result.content !== 'string' ||
      !result.language
    ) {
      throw new Error('Invalid file data structure');
    }

    console.log(
      'File read successfully:',
      fileName,
      `(${content.length} chars, ${language})`,
    );
    return result;
  } catch (error) {
    console.error('Error reading file:', filePath, error);

    // Ensure we throw a proper Error object, not an Event
    const errorMessage =
      error instanceof Error
        ? error.message
        : typeof error === 'string'
        ? error
        : 'Unknown error reading file';

    const finalError = new Error(`Failed to read file: ${errorMessage}`);

    // Log the error for debugging
    console.error('Final error being thrown:', finalError.message);

    throw finalError;
  }
});

// New IPC handler for saving file contents
ipcMain.handle(
  'save-file',
  async (event, filePath: string, content: string) => {
    try {
      console.log('🔄 Starting save operation...');
      console.log('📁 File path:', filePath);
      console.log('📝 Content length:', content.length);
      console.log(
        '📝 Content preview (first 100 chars):',
        content.substring(0, 100),
      );

      // Validate input
      if (!filePath || typeof filePath !== 'string') {
        throw new Error('Invalid file path provided');
      }

      if (typeof content !== 'string') {
        throw new Error('Invalid file content provided');
      }

      // Create backup if file exists
      const backupPath = `${filePath}.backup`;
      try {
        if (fs.existsSync(filePath)) {
          await fs.promises.copyFile(filePath, backupPath);
          console.log('💾 Backup created:', backupPath);
        }
      } catch (backupError) {
        console.warn('Could not create backup:', backupError);
        // Continue with save even if backup fails
      }

      // Write file content with explicit error handling
      console.log('✍️ Writing file...');
      await fs.promises
        .writeFile(filePath, content, 'utf8')
        .catch(writeError => {
          throw new Error(`Cannot write file content: ${writeError.message}`);
        });

      // Verify the write by reading it back immediately
      console.log('🔍 Verifying write...');
      const writtenContent = await fs.promises.readFile(filePath, 'utf8');
      console.log('📖 Written content length:', writtenContent.length);

      if (writtenContent.length !== content.length) {
        throw new Error(
          `Write verification failed: expected ${content.length} chars, got ${writtenContent.length}`,
        );
      }

      // Remove backup on successful save
      try {
        if (fs.existsSync(backupPath)) {
          await fs.promises.unlink(backupPath);
          console.log('🗑️ Backup removed');
        }
      } catch (cleanupError) {
        console.warn('Could not remove backup file:', cleanupError);
        // Don't fail the save for this
      }

      console.log(
        '✅ File saved successfully:',
        filePath,
        `(${content.length} chars)`,
      );
      return { success: true, path: filePath };
    } catch (error) {
      console.error('❌ Error saving file:', filePath, error);

      // Ensure we throw a proper Error object
      const errorMessage =
        error instanceof Error
          ? error.message
          : typeof error === 'string'
          ? error
          : 'Unknown error saving file';

      throw new Error(`Failed to save file: ${errorMessage}`);
    }
  },
);

const createWindow = () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    frame: true, // Frameless window
  });

  // Add error handling for the webContents
  mainWindow.webContents.on('unresponsive', () => {
    console.error('Renderer process became unresponsive');
  });

  mainWindow.webContents.on('responsive', () => {
    console.log('Renderer process became responsive again');
  });

  mainWindow.webContents.on('render-process-gone', (event, details) => {
    console.error('Renderer process gone:', details);
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Set up application menu
const createMenu = () => {
  const { Menu } = require('electron');

  const template: Electron.MenuItemConstructorOptions[] = [
    {
      label: 'File',
      submenu: [
        {
          label: 'Open File or Folder...',
          accelerator: 'CmdOrCtrl+O',
          click: async () => {
            if (mainWindow) {
              mainWindow.webContents.send('menu-open-file');
            }
          },
        },
        {
          label: 'Close File',
          accelerator: 'CmdOrCtrl+W',
          click: async () => {
            if (mainWindow) {
              mainWindow.webContents.send('menu-close-file');
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Save File',
          accelerator: 'CmdOrCtrl+S',
          click: async () => {
            if (mainWindow) {
              mainWindow.webContents.send('menu-save-file');
            }
          },
        },
        { type: 'separator' },
        {
          label: 'Quit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => app.quit(),
        },
      ],
    },
    {
      label: 'Edit',
      submenu: [
        { role: 'undo' },
        { role: 'redo' },
        { type: 'separator' },
        { role: 'cut' },
        { role: 'copy' },
        { role: 'paste' },
        { role: 'selectAll' },
      ],
    },
    {
      label: 'View',
      submenu: [
        { role: 'reload' },
        { role: 'forceReload' },
        { role: 'toggleDevTools' },
        { type: 'separator' },
        { role: 'resetZoom' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { type: 'separator' },
        { role: 'togglefullscreen' },
      ],
    },
    {
      label: 'Window',
      submenu: [{ role: 'minimize' }, { role: 'close' }],
    },
  ];

  // macOS specific menu adjustments
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideOthers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' },
      ],
    });

    // Window menu
    template[4].submenu = [
      { role: 'close' },
      { role: 'minimize' },
      { role: 'zoom' },
      { type: 'separator' },
      { role: 'front' },
    ];
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createMenu();
  createWindow();

  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// Add global error handlers
process.on('uncaughtException', error => {
  console.error('Uncaught Exception in Main Process:', error);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection in Main Process:', reason);
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
