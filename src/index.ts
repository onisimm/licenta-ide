import { app, BrowserWindow, ipcMain, dialog } from 'electron';
import fs from 'fs';
import path from 'path';
import Store from 'electron-store';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SELECTED_FOLDER_STORE_NAME = 'selected-folder';
const store = new Store();

// Global reference to main window
let mainWindow: BrowserWindow | null = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const buildFileTree = (dirPath: string): any[] => {
  try {
    // Read only the direct children of this directory (not recursive)
    const items = fs.readdirSync(dirPath, { withFileTypes: true });

    return items
      .filter(item => item.name !== '.git' && !item.name.startsWith('.'))
      .sort((a, b) => {
        // Directories first, then files, alphabetically
        if (a.isDirectory() && !b.isDirectory()) return -1;
        if (!a.isDirectory() && b.isDirectory()) return 1;
        return a.name.localeCompare(b.name);
      })
      .map(item => {
        const itemPath = path.join(dirPath, item.name);
        const node = {
          name: item.name,
          parentPath: dirPath,
          path: itemPath,
          isDirectory: item.isDirectory(),
          children: [] as any[],
        };

        // Only for directories: recursively build children
        if (item.isDirectory()) {
          try {
            node.children = buildFileTree(itemPath);
          } catch (error) {
            // Handle permission errors or other issues
            console.warn(`Cannot read directory: ${itemPath}`, error);
            node.children = [];
          }
        }

        return node;
      });
  } catch (error) {
    console.error(`Error reading directory: ${dirPath}`, error);
    return [];
  }
};

// Set up IPC handlers
ipcMain.handle('get-folder', async () => {
  // @ts-ignore
  return store.get(SELECTED_FOLDER_STORE_NAME);
});

ipcMain.handle('open-folder', async () => {
  try {
    if (!mainWindow) {
      console.error('No main window available');
      return null;
    }

    const result = await dialog.showOpenDialog(mainWindow, {
      properties: ['openDirectory'],
      title: 'Select Directory',
    });

    console.log('Dialog result:', result);

    if (result.canceled || !result.filePaths || result.filePaths.length === 0) {
      console.log('Dialog was cancelled or no paths selected');
      return null;
    }

    const selectedPath = result.filePaths[0];
    console.log('Selected path:', selectedPath);

    const tree = buildFileTree(selectedPath);

    const structure = {
      name: path.basename(selectedPath),
      root: selectedPath,
      tree: tree,
    };

    console.log('Folder structure created successfully');

    // @ts-ignore
    store.set(SELECTED_FOLDER_STORE_NAME, structure);

    return structure;
  } catch (error) {
    console.error('Error in open-folder handler:', error);
    return null;
  }
});

const createWindow = () => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    frame: false, // Frameless window
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
